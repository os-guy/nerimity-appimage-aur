name: Update AUR Package

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - github
    paths-ignore:
      - '.github/**'  # Avoid recursion

jobs:
  update-package:
    runs-on: ubuntu-latest
    # Add permissions for GitHub token
    permissions:
      contents: write
    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: github  # Explicitly checkout the github branch
          # Use token for authentication
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq build-essential

      - name: Deploy SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.AUR_KNOWN_HOSTS }}
          if_key_exists: replace
          name: id_rsa # Explicitly name the key
          config: |
            Host aur.archlinux.org
              IdentityFile ~/.ssh/id_rsa
              User aur

      - name: Verify SSH key
        run: |
          ssh-add -l
          echo "Testing AUR SSH connection (will fail safely if not authorized)"
          ssh -T aur@aur.archlinux.org || true

      - name: Configure Git
        run: |
          git config --global user.name "${{ vars.AUR_USERNAME }}"
          git config --global user.email "${{ vars.AUR_EMAIL }}"
          # Make sure these environment variables are set in repository settings
          if [ -z "${{ vars.AUR_USERNAME }}" ] || [ -z "${{ vars.AUR_EMAIL }}" ]; then
            echo "Warning: AUR_USERNAME or AUR_EMAIL is not set. Using fallback values."
            git config --global user.name "GitHub Action Bot"
            git config --global user.email "action@github.com"
          fi

      - name: Check for updates
        id: check-updates
        run: |
          # Get current version from PKGBUILD
          CURRENT_VERSION=$(grep -oP '^pkgver=\K.*' PKGBUILD)
          
          # Get latest version from GitHub API with error handling
          LATEST_VERSION_RESPONSE=$(curl -s -f "https://api.github.com/repos/Nerimity/nerimity-desktop/releases/latest" || echo '{"tag_name": "failed"}')
          
          if echo "$LATEST_VERSION_RESPONSE" | grep -q "failed"; then
            echo "Failed to fetch latest version from GitHub API"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LATEST_VERSION=$(echo "$LATEST_VERSION_RESPONSE" | jq -r .tag_name | sed 's/^v//g')
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" == "null" ]; then
            echo "Failed to parse version from GitHub API response"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "Latest version: $LATEST_VERSION"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package in github branch
        if: steps.check-updates.outputs.update_needed == 'true'
        id: update-github
        run: |
          # Ensure Git is configured for this step
          git config --global user.name "${{ vars.AUR_USERNAME || 'GitHub Action Bot' }}"
          git config --global user.email "${{ vars.AUR_EMAIL || 'action@github.com' }}"
          
          # Update PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=${{ steps.check-updates.outputs.latest_version }}/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
          
          # Generate .SRCINFO directly using the known structure
          # This avoids dependency on external tools like makepkg-template that might fail
          echo "pkgbase = nerimity-appimage" > .SRCINFO
          echo "	pkgdesc = $(grep -oP '^pkgdesc="\K[^"]+' PKGBUILD)" >> .SRCINFO
          echo "	pkgver = ${{ steps.check-updates.outputs.latest_version }}" >> .SRCINFO
          echo "	pkgrel = 1" >> .SRCINFO
          echo "	url = $(grep -oP '^url="\K[^"]+' PKGBUILD)" >> .SRCINFO
          echo "	install = nerimity-appimage.install" >> .SRCINFO
          echo "	arch = x86_64" >> .SRCINFO
          echo "	license = custom:unknown" >> .SRCINFO
          echo "	makedepends = curl" >> .SRCINFO
          echo "	makedepends = jq" >> .SRCINFO
          echo "	depends = fuse2" >> .SRCINFO
          echo "	depends = hicolor-icon-theme" >> .SRCINFO
          echo "	depends = gtk-update-icon-cache" >> .SRCINFO
          echo "	depends = desktop-file-utils" >> .SRCINFO
          echo "	provides = nerimity" >> .SRCINFO
          echo "	conflicts = nerimity" >> .SRCINFO
          echo "	options = !strip" >> .SRCINFO
          echo "" >> .SRCINFO
          echo "pkgname = nerimity-appimage" >> .SRCINFO
          
          # Commit changes to GitHub (github branch)
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${{ steps.check-updates.outputs.latest_version }}"
          
          # Use authenticated HTTPS URL for pushing
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin github
          
          echo "github_updated=true" >> $GITHUB_OUTPUT

      - name: Update aur branch for AUR
        if: steps.update-github.outputs.github_updated == 'true'
        id: update-aur-branch
        continue-on-error: true
        run: |
          # Ensure Git is configured for this step
          git config --global user.name "${{ vars.AUR_USERNAME || 'GitHub Action Bot' }}"
          git config --global user.email "${{ vars.AUR_EMAIL || 'action@github.com' }}"
          
          # Create a temporary branch from aur
          git fetch origin aur || { echo "Failed to fetch aur branch. It might not exist yet."; exit 1; }
          git checkout -b temp-aur origin/aur
          
          # Copy updated files to current directory (already in the temp-aur branch)
          # Instead of trying to copy to a subdirectory, we're already in the right branch
          cp -f ../PKGBUILD ../SRCINFO ../*.install ../update_srcinfo.sh ../README.md . || { echo "Failed to copy files"; exit 1; }
          
          # Commit and push to aur
          git config --global user.name "${{ vars.AUR_USERNAME || 'GitHub Action Bot' }}"
          git config --global user.email "${{ vars.AUR_EMAIL || 'action@github.com' }}"
          git add . || { echo "Failed to stage files"; exit 1; }
          git commit -m "Update to version ${{ steps.check-updates.outputs.latest_version }}" || { echo "Nothing to commit"; exit 0; }
          
          # Use authenticated HTTPS URL for pushing
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin HEAD:aur || { echo "Failed to push to aur branch"; exit 1; }
          
          # Return to the github branch
          git checkout github
          
          echo "aur_branch_updated=true" >> $GITHUB_OUTPUT

      - name: Clone AUR repository
        if: steps.check-updates.outputs.update_needed == 'true'
        id: clone-aur
        continue-on-error: true
        run: |
          # Debug SSH configuration
          echo "SSH configuration:"
          cat ~/.ssh/config || echo "No SSH config found"
          
          # Ensure SSH agent is running and key is added
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa || echo "Failed to add key to agent"
          
          # Test SSH connection before cloning
          ssh -Tv aur@aur.archlinux.org || echo "SSH test connection failed but continuing"
          
          # Clone AUR repository to a temporary directory
          # Use --depth=1 to make it faster and only get the latest commit
          GIT_SSH_COMMAND="ssh -vvv" git clone --depth=1 ssh://aur@aur.archlinux.org/nerimity-appimage.git aur-repo || { 
            echo "Failed to clone AUR repo"
            echo "aur_cloned=false" >> $GITHUB_OUTPUT
            exit 0  # Don't fail the workflow
          }
          echo "aur_cloned=true" >> $GITHUB_OUTPUT

      - name: Update AUR repository
        if: steps.clone-aur.outputs.aur_cloned == 'true'
        run: |
          # Ensure Git is configured for this step
          git config --global user.name "${{ vars.AUR_USERNAME || 'GitHub Action Bot' }}"
          git config --global user.email "${{ vars.AUR_EMAIL || 'action@github.com' }}"
          
          # Copy updated files to AUR repository
          cp PKGBUILD .SRCINFO nerimity-appimage.install update_srcinfo.sh README.md aur-repo/ || { echo "Failed to copy files to AUR repo"; exit 1; }
          
          # Commit and push to AUR
          cd aur-repo
          git config --local user.name "${{ vars.AUR_USERNAME || 'GitHub Action Bot' }}"
          git config --local user.email "${{ vars.AUR_EMAIL || 'action@github.com' }}"
          git add . || { echo "Failed to stage files in AUR repo"; exit 1; }
          git commit -m "Update to version ${{ steps.check-updates.outputs.latest_version }}" || { echo "Nothing to commit to AUR"; exit 0; }
          
          # Try to push, ensuring SSH agent is used
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          GIT_SSH_COMMAND="ssh -vvv" git push || {
            echo "Push failed, trying to pull changes first"
            git pull --rebase || { echo "Failed to pull/rebase"; exit 1; }
            GIT_SSH_COMMAND="ssh -vvv" git push || { echo "Failed to push after rebase"; exit 1; }
          }
          
          echo "Successfully updated AUR package to version ${{ steps.check-updates.outputs.latest_version }}"

      - name: Summary
        run: |
          if [ "${{ steps.check-updates.outputs.update_needed }}" == "true" ]; then
            echo "Package updated from $(grep -oP '^pkgver=\K.*' PKGBUILD) to ${{ steps.check-updates.outputs.latest_version }}"
          else
            echo "No update needed. Current version is up to date."
          fi